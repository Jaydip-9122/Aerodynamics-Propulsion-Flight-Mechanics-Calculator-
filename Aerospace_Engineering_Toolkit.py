# -*- coding: utf-8 -*-
"""Aerospace Engineering Toolkit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rJ3e8-2iC12gf9IW2Cd7CrSr9TrSdltQ
"""

import math
import numpy as np
import matplotlib.pyplot as plt
import os # For file operations

# --- Global Constants ---
R_air = 287.05          # Specific gas constant for air [J/(kg·K)]
gamma_air = 1.4         # Ratio of specific heats for air
g0 = 9.80665            # Standard acceleration of gravity [m/s^2]

# --- 1. Isentropic Flow Relations (from PROPULSION.py) ---
def isentropic_solver():
    """
    Calculates total to static ratios for temperature, pressure, and density
    based on Mach number and specific heat ratio.
    """
    print("\n--- Isentropic Equation Solver ---")
    try:
        gamma = float(input("Enter specific heat ratio (γ): "))
        M = float(input("Enter Mach number: "))

        if M < 0:
            print("Mach number cannot be negative.")
            return
        if gamma <= 1:
            print("Specific heat ratio (γ) must be greater than 1.")
            return

        T0_T = 1 + ((gamma - 1) / 2) * M**2
        P0_P = T0_T ** (gamma / (gamma - 1))
        rho0_rho = T0_T ** (1 / (gamma - 1))

        print(f"\nTotal to Static Temperature Ratio (T0/T): {T0_T:.3f}")
        print(f"Total to Static Pressure Ratio (P0/P): {P0_P:.3f}")
        print(f"Total to Static Density Ratio (ρ0/ρ): {rho0_rho:.3f}")
    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 2. Jet Engine Calculator (from PROPULSION.py, enhanced) ---
def jet_engine_calculator():
    """
    Calculates thrust, TSFC, and various efficiencies for a jet engine.
    """
    print("\n--- Jet Engine Parameter Calculation ---")
    try:
        T_turbine_inlet = float(input("Enter turbine inlet temperature (K): "))
        T_ambient = float(input("Enter ambient temperature (K): "))
        V_exit = float(input("Enter exhaust velocity (m/s): "))
        V_flight = float(input("Enter flight velocity (m/s): "))
        mdot_air = float(input("Enter air mass flow rate (kg/s): "))
        mdot_fuel = float(input("Enter fuel mass flow rate (kg/s): "))
        HV = float(input("Enter fuel heating value (J/kg): ")) # Heating Value of fuel

        if any(val < 0 for val in [T_turbine_inlet, T_ambient, mdot_air, mdot_fuel, HV]):
            print("All input values (except velocities) must be non-negative.")
            return
        if mdot_air <= 0:
            print("Air mass flow rate must be positive.")
            return
        if HV <= 0:
            print("Fuel heating value must be positive.")
            return

        # Thrust calculation
        thrust = mdot_air * (V_exit - V_flight) # Assuming mdot_fuel is small compared to mdot_air for thrust

        # Thrust Specific Fuel Consumption (TSFC)
        # Standard TSFC is fuel mass flow rate per unit thrust.
        if thrust > 0:
            TSFC = mdot_fuel / thrust # kg/(N.s)
        else:
            TSFC = float('inf')
            print("Warning: Thrust is zero or negative, TSFC cannot be calculated.")

        # Thermal Efficiency (η_th)
        # Power output (useful work) / Heat input
        heat_input = mdot_fuel * HV
        if heat_input > 0:
            thermal_efficiency = (thrust * V_flight) / heat_input
        else:
            thermal_efficiency = 0
            print("Warning: Heat input is zero, thermal efficiency cannot be calculated.")

        # Propulsive Efficiency (η_p)
        if V_flight < 0 or V_exit < 0: # Velocities should generally be positive or zero
            propulsive_efficiency = 0
            print("Warning: Flight or exhaust velocity is negative, propulsive efficiency cannot be meaningfully calculated.")
        elif V_exit == V_flight: # No relative velocity, ideal propulsive efficiency (e.g., hovering with zero exhaust velocity relative to ambient)
            propulsive_efficiency = 1.0 if V_flight > 0 else 0 # If V_flight is also 0, then no motion, so 0 efficiency
        elif (V_exit + V_flight) == 0: # This implies V_exit = -V_flight, which is an odd physical scenario for propulsion
            propulsive_efficiency = 0
            print("Warning: Sum of velocities is zero, propulsive efficiency cannot be calculated.")
        else:
            propulsive_efficiency = (2 * V_flight) / (V_exit + V_flight)


        # Overall Efficiency (η_o)
        overall_efficiency = thermal_efficiency * propulsive_efficiency

        print(f"\nThrust: {thrust:.2f} N")
        print(f"Thrust Specific Fuel Consumption (TSFC): {TSFC:.6f} kg/(N.s)")
        print(f"Thermal Efficiency (η_th): {thermal_efficiency:.4f}")
        print(f"Propulsive Efficiency (η_p): {propulsive_efficiency:.4f}")
        print(f"Overall Efficiency (η_o): {overall_efficiency:.4f}")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 3. Rocket Engine Calculator (from PROPULSION.py, enhanced) ---
def rocket_engine_calculator():
    """
    Calculates thrust, specific impulse (Isp), characteristic velocity (C*),
    thrust coefficient (CF), and nozzle efficiency for a rocket engine.
    """
    print("\n--- Rocket Engine Parameter Calculation ---")
    try:
        mdot = float(input("Enter mass flow rate (kg/s): "))
        Ve = float(input("Enter exhaust velocity (m/s): "))
        Pe = float(input("Enter exit pressure (Pa): "))
        Pa = float(input("Enter ambient pressure (Pa): "))
        Ae = float(input("Enter exit area (m^2): "))
        Pc = float(input("Enter chamber pressure (Pa): ")) # New parameter
        At = float(input("Enter throat area (m^2): "))     # New parameter
        Isp_ideal = float(input("Enter ideal specific impulse (s): ")) # New parameter for nozzle efficiency

        if any(val < 0 for val in [mdot, Ve, Pe, Pa, Ae, Pc, At, Isp_ideal]):
            print("All input values must be non-negative.")
            return
        if mdot <= 0:
            print("Mass flow rate must be positive.")
            return
        if Pc <= 0 or At <= 0:
            print("Chamber pressure and throat area must be positive for C* and CF calculation.")
            return
        if Isp_ideal <= 0:
            print("Ideal specific impulse must be positive for nozzle efficiency calculation.")
            return

        # Thrust calculation
        thrust = mdot * Ve + (Pe - Pa) * Ae

        # Specific Impulse (Isp)
        if mdot * g0 > 0:
            Isp = thrust / (mdot * g0)
        else:
            Isp = float('inf')
            print("Warning: Mass flow rate is zero, Isp cannot be calculated.")

        # Characteristic Velocity (C*)
        if mdot > 0:
            C_star = (Pc * At) / mdot
        else:
            C_star = float('inf')
            print("Warning: Mass flow rate is zero, C* cannot be calculated.")

        # Thrust Coefficient (CF)
        if Pc * At > 0:
            CF = thrust / (Pc * At)
        else:
            CF = float('inf')
            print("Warning: Pc * At is zero, CF cannot be calculated.")

        # Nozzle Efficiency (η_nozzle)
        if Isp_ideal > 0:
            nozzle_efficiency = Isp / Isp_ideal
        else:
            nozzle_efficiency = 0
            print("Warning: Ideal Isp is zero, nozzle efficiency cannot be calculated.")

        print(f"\nThrust: {thrust:.2f} N")
        print(f"Specific Impulse (Isp): {Isp:.2f} s")
        print(f"Characteristic Velocity (C*): {C_star:.2f} m/s")
        print(f"Thrust Coefficient (CF): {CF:.3f}")
        print(f"Nozzle Efficiency (η_nozzle): {nozzle_efficiency:.4f}")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 4. Solid Rocket Motor Calculator (from PROPULSION.py, enhanced) ---
def solid_rocket_calculator():
    """
    Calculates burn rate, total burned mass, total impulse, and average thrust
    for a solid rocket motor.
    """
    print("\n--- Solid Rocket Motor Calculation & Analysis ---")
    try:
        Ab = float(input("Enter burning surface area (m^2): "))
        Pc = float(input("Enter chamber pressure (Pa): "))
        rho_propellant = float(input("Enter propellant density (kg/m^3): "))
        a = float(input("Enter burn rate coefficient (a): "))
        n = float(input("Enter pressure exponent (n): "))
        burn_time = float(input("Enter burn time (s): "))
        # For impulse and average thrust, we need an effective Isp for the solid motor
        Isp_solid = float(input("Enter specific impulse for solid motor (s): ")) # New parameter

        if any(val < 0 for val in [Ab, Pc, rho_propellant, a, n, burn_time, Isp_solid]):
            print("All input values must be non-negative.")
            return
        if burn_time <= 0:
            print("Burn time must be positive.")
            return

        rb = a * Pc**n
        Vburned = Ab * rb * burn_time
        m_burned = Vburned * rho_propellant

        # Total Impulse (I_total)
        total_impulse = m_burned * Isp_solid * g0

        # Average Thrust (F_avg)
        if burn_time > 0:
            average_thrust = total_impulse / burn_time
        else:
            average_thrust = float('inf')
            print("Warning: Burn time is zero, average thrust cannot be calculated.")

        print(f"\nBurn rate: {rb:.5f} m/s")
        print(f"Total burned mass: {m_burned:.2f} kg")
        print(f"Total Impulse: {total_impulse:.2f} N.s")
        print(f"Average Thrust: {average_thrust:.2f} N")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 5. Aerodynamic Parameter Calculation (from AD.py, enhanced) ---
def aerodynamic_parameters():
    """
    Calculate lift, drag forces, dynamic pressure, aspect ratio,
    induced drag, and total drag given flight conditions and aircraft geometry.
    L = 0.5 * rho * V^2 * S * C_L
    D = 0.5 * rho * V^2 * S * C_D
    """
    print("\n=== Aerodynamic Parameter Calculation ===")
    try:
        rho = float(input("Enter air density ρ [kg/m^3]: "))
        V = float(input("Enter velocity V [m/s]: "))
        S = float(input("Enter reference area S [m^2]: "))
        CL = float(input("Enter lift coefficient C_L: "))
        CD_profile = float(input("Enter profile drag coefficient C_D_profile: ")) # Assuming CD is profile drag
        b = float(input("Enter wingspan b [m]: ")) # New parameter: wingspan
        e = float(input("Enter Oswald efficiency factor e (e.g., 0.7-0.95): ")) # New parameter: Oswald efficiency

        if any(val < 0 for val in [rho, V, S, b, e]):
            print("Density, velocity, area, wingspan, and Oswald efficiency must be non-negative.")
            return
        if S <= 0 or b <= 0:
            print("Reference area and wingspan must be positive.")
            return
        if not (0 < e <= 1):
            print("Oswald efficiency factor 'e' should be between 0 and 1 (exclusive of 0).")
            return

        q = 0.5 * rho * V**2
        L = q * S * CL

        # Aspect Ratio (AR)
        AR = b**2 / S

        # Induced Drag Coefficient (CDi)
        # Avoid division by zero if AR is zero, though it shouldn't be with positive S and b
        if AR > 0:
            CDi = CL**2 / (math.pi * AR * e)
        else:
            CDi = float('inf')
            print("Warning: Aspect Ratio is zero, induced drag cannot be calculated.")

        # Total Drag Coefficient (CD_total)
        CD_total = CD_profile + CDi

        # Total Drag Force (D)
        D = q * S * CD_total

        print(f"\nDynamic pressure q = {q:.2f} Pa")
        print(f"Lift L = {L:.2f} N")
        print(f"Profile Drag Coefficient C_D_profile = {CD_profile:.3f}")
        print(f"Aspect Ratio AR = {AR:.2f}")
        print(f"Induced Drag Coefficient C_Di = {CDi:.4f}")
        print(f"Total Drag Coefficient C_D_total = {CD_total:.4f}")
        print(f"Total Drag D = {D:.2f} N\n")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 6. Earth Atmosphere Calculation (from AD.py, enhanced) ---
def earth_atmosphere():
    """
    Compute standard atmosphere properties (Temperature T, Pressure p, Density rho)
    for altitudes up to 32 km using ISA model segments.
    """
    print("\n=== Earth Atmosphere Calculation (ISA) ===")
    try:
        h = float(input("Enter altitude h [m]: "))

        if h < 0:
            print("Altitude cannot be negative.")
            return

        # Constants for ISA model segments
        T0 = 288.15          # Sea level standard temperature [K]
        p0 = 101325.0        # Sea level standard pressure [Pa]
        L_tropo = 0.0065     # Troposphere lapse rate [K/m]
        h_tropo = 11000      # Troposphere height [m]
        T_tropo_top = T0 - L_tropo * h_tropo # Temperature at 11km
        p_tropo_top = p0 * (T_tropo_top / T0)**(g0 / (L_tropo * R_air)) # Pressure at 11km

        h_strat_const_T = 20000 # Height for constant temp stratosphere [m]
        T_strat_const_T = T_tropo_top # Temperature in constant temp stratosphere
        p_strat_const_T = p_tropo_top * math.exp(-g0 * (h_strat_const_T - h_tropo) / (R_air * T_strat_const_T)) # Pressure at 20km

        L_strat_increase = -0.001 # Stratosphere lapse rate (temperature increase) [K/m]
        h_strat_increase_top = 32000 # Height for increasing temp stratosphere [m]
        T_strat_increase_top = T_strat_const_T - L_strat_increase * (h_strat_increase_top - h_strat_const_T) # Temperature at 32km

        T, p = 0, 0 # Initialize to avoid UnboundLocalError

        # Troposphere (0–11 km)
        if h <= h_tropo:
            T = T0 - L_tropo * h
            p = p0 * (T / T0)**(g0 / (L_tropo * R_air))
        # Lower Stratosphere (11–20 km) - Isothermal
        elif h <= h_strat_const_T:
            T = T_tropo_top
            p = p_tropo_top * math.exp(-g0 * (h - h_tropo) / (R_air * T))
        # Middle Stratosphere (20–32 km) - Temperature increases
        elif h <= h_strat_increase_top:
            T = T_strat_const_T - L_strat_increase * (h - h_strat_const_T)
            # This pressure calculation assumes the lapse rate formula applies
            p = p_strat_const_T * (T / T_strat_const_T)**(g0 / (L_strat_increase * R_air))
        else:
            print(f"Warning: Altitude {h:.1f} m is beyond the valid range of this ISA model (up to {h_strat_increase_top/1000:.0f} km).")
            return # Added return to stop execution for out-of-range altitudes


        rho = p / (R_air * T)

        print(f"\nAt h = {h:.1f} m:")
        print(f"  Temperature T     = {T:.2f} K")
        print(f"  Pressure p        = {p:.2f} Pa")
        print(f"  Density rho       = {rho:.4f} kg/m^3\n")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 7. Wind Tunnel Nozzle Design Calculation (from AD.py) ---
def area_mach_ratio(M, gamma=gamma_air):
    """
    Returns A/A* for a given Mach number using isentropic flow relations:
      A/A* = (1/M) * [ (2/(γ+1))*(1 + (γ−1)/2*M^2) ]^((γ+1)/(2(γ−1)))
    """
    term1 = 2.0 / (gamma + 1.0)
    term2 = 1.0 + (gamma - 1.0) / 2.0 * M**2
    exponent = (gamma + 1.0) / (2.0 * (gamma - 1.0))
    return (1.0 / M) * (term1 * term2) ** exponent

def wind_tunnel_design():
    """
    Compute nozzle area ratios for a desired test Mach number.
    You typically choose a throat area A* and then scale:
      A_exit = A* * (A/A*)_exit
    """
    print("\n=== Wind Tunnel Nozzle Design Calculation ===")
    try:
        M = float(input("Enter target Mach number in test section M: "))
        A_throat = float(input("Enter throat area A* [m^2]: "))

        if M <= 0:
            print("Mach number must be positive.")
            return
        if A_throat <= 0:
            print("Throat area must be positive.")
            return

        AR = area_mach_ratio(M)
        A_exit = A_throat * AR

        print(f"\nIsentropic area ratio A/A* at M={M:.2f} is {AR:.3f}")
        print(f"-> Required test section (exit) area = {A_exit:.3f} m^2\n")
    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 8. Normal Shock Wave Calculation (from AD.py, enhanced) ---
def normal_shock():
    """
    Compute post-shock properties and total pressure ratio for a normal shock at Mach M1.
    """
    print("\n=== Normal Shock Wave Calculation ===")
    try:
        M1 = float(input("Enter upstream Mach number M1: "))

        if M1 < 1:
            print("Upstream Mach number M1 must be >= 1 for a normal shock.")
            return

        # Mach downstream
        M2_sq = (1 + (gamma_air - 1)/2 * M1**2) / (gamma_air*M1**2 - (gamma_air - 1)/2)
        M2 = math.sqrt(M2_sq)

        # Pressure ratio p2/p1
        p2_p1 = 1 + 2*gamma_air/(gamma_air+1)*(M1**2 - 1)

        # Temperature ratio T2/T1
        T2_T1 = p2_p1 * ((2 + (gamma_air - 1)*M1**2)/((gamma_air + 1)*M1**2))

        # Density ratio rho2/rho1
        rho2_rho1 = p2_p1 / T2_T1

        # Total Pressure Ratio P02/P01 (new parameter)
        # P02/P01 = [( (gamma+1)*M1^2 / (2 + (gamma-1)*M1^2) )^(gamma/(gamma-1))] * [ ( (gamma+1) / (2*gamma*M1^2 - (gamma-1)) )^(1/(gamma-1)) ]
        term_P02_P01_1 = ((gamma_air + 1) * M1**2 / (2 + (gamma_air - 1) * M1**2))**(gamma_air / (gamma_air - 1))
        term_P02_P01_2 = ((gamma_air + 1) / (2 * gamma_air * M1**2 - (gamma_air - 1)))**(1 / (gamma_air - 1))
        P02_P01 = term_P02_P01_1 * term_P02_P01_2

        print(f"\nDownstream Mach M2      = {M2:.3f}")
        print(f"Pressure ratio p2/p1    = {p2_p1:.3f}")
        print(f"Temperature ratio T2/T1 = {T2_T1:.3f}")
        print(f"Density ratio rho2/rho1 = {rho2_rho1:.3f}")
        print(f"Total Pressure Ratio P02/P01 = {P02_P01:.3f}\n")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 9. Airfoil Generator (NACA 4-digit) (from FM.py, enhanced) ---
def airfoil_generator():
    """
    Generates and plots a NACA 4-digit airfoil.
    Offers an option to save the coordinates to a .dat file.
    """
    print("\n--- NACA 4-Digit Airfoil Generator ---")
    try:
        digits = input("Enter NACA 4-digit code (e.g., 2412): ")
        if len(digits) != 4 or not digits.isdigit():
            print("Invalid input. NACA code must be 4 digits.")
            return

        m = int(digits[0]) / 100  # Maximum camber
        p = int(digits[1]) / 10   # Location of maximum camber
        t = int(digits[2:]) / 100 # Maximum thickness
        chord = 1.0               # Normalized chord length
        num_points = 100          # Number of points along the chord

        x = np.linspace(0, chord, num_points)

        # Thickness distribution
        yt = 5 * t * (0.2969*np.sqrt(x/chord) - 0.1260*(x/chord) - 0.3516*(x/chord)**2 + 0.2843*(x/chord)**3 - 0.1015*(x/chord)**4)

        # Camber line
        yc = np.where(x < p*chord,
                      m / (p**2) * (2*p*x/chord - (x/chord)**2),
                      m / ((1 - p)**2) * ((1 - 2*p) + 2*p*x/chord - (x/chord)**2))

        # Derivative of camber line (dyc/dx)
        dyc_dx = np.where(x < p*chord,
                          2*m/(p**2) * (p - x/chord),
                          2*m/((1-p)**2) * (p - x/chord))
        theta = np.arctan(dyc_dx)

        # Upper and lower surface coordinates
        xu = x - yt*np.sin(theta)
        yu = yc + yt*np.cos(theta)
        xl = x + yt*np.sin(theta)
        yl = yc - yt*np.cos(theta)

        # Plotting
        plt.figure(figsize=(10, 4))
        plt.plot(xu, yu, label='Upper Surface', color='blue')
        plt.plot(xl, yl, label='Lower Surface', color='red')
        plt.fill_between(x, yl, yu, color='lightblue', alpha=0.3) # Fill the airfoil
        plt.title(f"NACA {digits} Airfoil (Chord = {chord:.1f})", fontsize=14)
        plt.xlabel("X/c", fontsize=12)
        plt.ylabel("Y/c", fontsize=12)
        plt.axis("equal") # Ensures correct aspect ratio
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()
        plt.tight_layout()
        plt.show()

        # Option to save coordinates
        save_choice = input("Do you want to save the airfoil coordinates to a .dat file? (yes/no): ").strip().lower()
        if save_choice == 'yes':
            filename = f"NACA_{digits}.dat"
            try:
                with open(filename, 'w') as f:
                    f.write(f"# NACA {digits} Airfoil Coordinates\n")
                    f.write(f"# Upper Surface\n")
                    for i in range(num_points):
                        f.write(f"{xu[i]:.6f}\t{yu[i]:.6f}\n")
                    f.write(f"# Lower Surface\n")
                    # Reverse lower surface points to go from trailing edge to leading edge for continuity
                    for i in range(num_points - 1, -1, -1):
                        f.write(f"{xl[i]:.6f}\t{yl[i]:.6f}\n")
                print(f"Coordinates saved to {filename}")
            except Exception as e:
                print(f"Error saving file: {e}")
        else:
            print("Airfoil coordinates not saved.")

    except ValueError:
        print("Invalid input. Please ensure the NACA code is numeric.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 10. Graph Plotter of Aerodynamic Coefficients (from FM.py) ---
def plot_aero_coefficients():
    """
    Plots example aerodynamic coefficients (CL, CD, CM) vs. Angle of Attack.
    """
    print("\n--- Plot Aerodynamic Coefficients ---")
    try:
        alpha = np.linspace(-5, 15, 100) # Angle of Attack in degrees
        CL = 0.1 + 0.1 * alpha           # Example Lift Coefficient
        CD = 0.02 + 0.004 * (alpha - 2)**2 # Example Drag Coefficient
        CM = -0.05 + 0.001 * alpha       # Example Moment Coefficient

        plt.figure(figsize=(10, 6))
        plt.plot(alpha, CL, label="Lift Coefficient (CL)", color='blue', linewidth=2)
        plt.plot(alpha, CD, label="Drag Coefficient (CD)", color='red', linewidth=2)
        plt.plot(alpha, CM, label="Moment Coefficient (CM)", color='green', linewidth=2)
        plt.xlabel("Angle of Attack (deg)", fontsize=12)
        plt.ylabel("Coefficient Value", fontsize=12)
        plt.title("Aerodynamic Coefficients vs. Angle of Attack", fontsize=14)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend(fontsize=10)
        plt.axvline(0, color='gray', linestyle=':', linewidth=0.8) # Zero AoA line
        plt.axhline(0, color='gray', linestyle=':', linewidth=0.8) # Zero Coefficient line
        plt.tight_layout()
        plt.show()
        print("Displayed example plot of aerodynamic coefficients.")
    except Exception as e:
        print(f"An error occurred during plotting: {e}")

# --- 11. Range and Endurance (Jet and Propeller Aircraft) (from FM.py) ---
def range_endurance_calculator():
    """
    Calculates approximate range or endurance for jet and propeller aircraft
    based on simplified Breguet equations.
    """
    print("\n--- Range and Endurance Calculation ---")
    try:
        aircraft_type = input("Enter aircraft type (jet/prop): ").strip().lower()
        L_D = float(input("Enter lift-to-drag ratio (L/D): "))
        W1 = float(input("Enter initial weight (N): "))
        W2 = float(input("Enter final weight (N): "))

        if not (W1 > W2 > 0):
            print("Initial weight must be greater than final weight, and both must be positive.")
            return
        if L_D <= 0:
            print("Lift-to-drag ratio must be positive.")
            return

        if aircraft_type == 'jet':
            TSFC = float(input("Enter Thrust Specific Fuel Consumption (TSFC) (1/hr): "))
            if TSFC <= 0:
                print("TSFC must be positive.")
                return
            # Breguet Range Equation for Jet Aircraft
            R = (1 / TSFC) * (L_D) * np.log(W1 / W2) # Result in km if TSFC is in 1/hr and L/D is dimensionless
            print(f"Range (approx): {R:.2f} km")
        elif aircraft_type == 'prop':
            eta = float(input("Enter propeller efficiency (0.7–0.85): "))
            SFC = float(input("Enter brake Specific Fuel Consumption (SFC) (kg/W.hr): "))
            # V = float(input("Enter velocity (m/s): ")) # Velocity is not directly used in this simplified endurance formula
            if not (0 < eta <= 1):
                print("Propeller efficiency must be between 0 and 1.")
                return
            if SFC <= 0:
                print("SFC must be positive.")
                return
            # Breguet Endurance Equation for Propeller Aircraft
            E = (eta / SFC) * (L_D) * np.log(W1 / W2) # Result in hours
            print(f"Endurance (approx): {E:.2f} hours")
        else:
            print("Unknown aircraft type. Please enter 'jet' or 'prop'.")
    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- 12. Gliding Flight Parameter Calculator (from FM.py, enhanced) ---
def gliding_flight_calculator():
    """
    Calculates glide speed, glide angle, glide ratio (L/D), and sink rate
    for an aircraft in gliding flight.
    """
    print("\n--- Gliding Flight Parameter Calculation ---")
    try:
        W = float(input("Enter weight (N): "))
        CL = float(input("Enter lift coefficient CL: "))
        CD = float(input("Enter drag coefficient CD: "))
        rho = float(input("Enter air density (kg/m^3): "))
        S = float(input("Enter wing area (m^2): "))

        if any(val <= 0 for val in [W, rho, S]):
            print("Weight, air density, and wing area must be positive.")
            return
        if CL <= 0:
            print("Lift coefficient must be positive for valid glide speed calculation.")
            return
        if CD <= 0:
            print("Drag coefficient must be positive.")
            return

        # Glide Speed (V)
        V = np.sqrt((2 * W) / (rho * S * CL))

        # Glide Angle (theta)
        if CL > 0:
            glide_angle = np.arctan(CD / CL)
        else:
            glide_angle = float('nan') # Not a Number
            print("Warning: Lift coefficient is zero or negative, glide angle cannot be calculated.")

        # Glide Ratio (L/D)
        if CD > 0:
            L_D = CL / CD
        else:
            L_D = float('inf') # Infinite glide ratio if no drag
            print("Warning: Drag coefficient is zero, glide ratio is infinite.")

        # Sink Rate (Vs) - new parameter
        sink_rate = V * np.sin(glide_angle) if not np.isnan(glide_angle) else float('nan')

        print(f"\nGlide Speed: {V:.2f} m/s")
        print(f"Glide Angle: {np.degrees(glide_angle):.2f} degrees")
        print(f"Glide Ratio (L/D): {L_D:.2f}")
        print(f"Sink Rate: {sink_rate:.2f} m/s")

    except ValueError:
        print("Invalid input. Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- Main Menus ---

def propulsion_menu():
    """Displays the Propulsion Toolkit menu."""
    while True:
        print("\n--- Aerospace Propulsion Toolkit ---")
        print("1. Isentropic Equation Solver")
        print("2. Jet Engine Parameter Calculation")
        print("3. Rocket Engine Parameter Calculation")
        print("4. Solid Rocket Motor Calculation & Analysis")
        print("b. Back to Main Menu")

        choice = input("Enter your choice (1-4, b): ").strip().lower()

        if choice == '1':
            isentropic_solver()
        elif choice == '2':
            jet_engine_calculator()
        elif choice == '3':
            rocket_engine_calculator()
        elif choice == '4':
            solid_rocket_calculator()
        elif choice == 'b':
            break
        else:
            print("Invalid choice. Please enter again.")

def aerodynamics_menu():
    """Displays the Aerodynamics Toolkit menu."""
    while True:
        print("\n--- Aerospace Aerodynamics Toolkit ---")
        print("1. Aerodynamic Parameter Calculation")
        print("2. Earth Atmosphere Calculation (ISA)")
        print("3. Wind Tunnel Nozzle Design Calculation")
        print("4. Normal Shock Wave Calculation")
        print("b. Back to Main Menu")

        choice = input("Select an option (1-4, b): ").strip().lower()

        if choice == '1':
            aerodynamic_parameters()
        elif choice == '2':
            earth_atmosphere()
        elif choice == '3':
            wind_tunnel_design()
        elif choice == '4':
            normal_shock()
        elif choice == 'b':
            break
        else:
            print("Invalid selection. Please try again.\n")

def flight_mechanics_menu():
    """Displays the Flight Mechanics Toolkit menu."""
    while True:
        print("\n--- Aerospace Flight Mechanics Toolkit ---")
        print("1. Airfoil Generator (NACA 4-digit)")
        print("2. Plot Aerodynamic Coefficients (Example)")
        print("3. Range and Endurance Calculation")
        print("4. Gliding Flight Parameter Calculation")
        print("b. Back to Main Menu")

        choice = input("Enter your choice (1-4, b): ").strip().lower()
        if choice == '1':
            airfoil_generator()
        elif choice == '2':
            plot_aero_coefficients()
        elif choice == '3':
            range_endurance_calculator()
        elif choice == '4':
            gliding_flight_calculator()
        elif choice == 'b':
            break
        else:
            print("Invalid input. Please enter again.")

def main_menu():
    """Main menu for the Aerospace Engineering Toolkit."""
    while True:
        print("\n=== Aerospace Engineering Toolkit Main Menu ===")
        print("1. Propulsion Tools")
        print("2. Aerodynamics Tools")
        print("3. Flight Mechanics Tools")
        print("q. Exit Toolkit")

        main_choice = input("Enter your choice (1-3, q): ").strip().lower()

        if main_choice == '1':
            propulsion_menu()
        elif main_choice == '2':
            aerodynamics_menu()
        elif main_choice == '3':
            flight_mechanics_menu()
        elif main_choice == 'q':
            print("Exiting Aerospace Engineering Toolkit. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter again.")

# Entry point for the script
if __name__ == "__main__":
    main_menu()